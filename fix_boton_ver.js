// ====================================================================
// üîß FUNCI√ìN CORREGIDA: viewRifa() - SOLUCI√ìN PROBLEMA BOT√ìN "VER"
// ====================================================================

// Reemplazar la funci√≥n viewRifa() existente con esta versi√≥n corregida
async function viewRifa(rifaId) {
    console.log(`üîç [DEBUG] Iniciando viewRifa con ID: ${rifaId}`);
    
    // Validar ID
    if (!rifaId || rifaId === 'undefined' || rifaId === 'null') {
        console.error('‚ùå [ERROR] ID de rifa inv√°lido:', rifaId);
        showNotification('Error: ID de simulaci√≥n inv√°lido', 'error');
        return;
    }
    
    // Validar autenticaci√≥n
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('‚ùå [ERROR] No hay token de autenticaci√≥n');
        showNotification('Debes iniciar sesi√≥n para ver esta simulaci√≥n', 'error');
        showAuthModal();
        return;
    }
    
    console.log(`‚úÖ [DEBUG] Token encontrado: ${token.substring(0, 20)}...`);
    
    // Mostrar loading
    document.getElementById('mainContainer').innerHTML = `
        <div class="loading">
            <p>üîÑ Cargando detalles de la simulaci√≥n...</p>
        </div>
    `;
    
    try {
        console.log(`üì° [DEBUG] Haciendo petici√≥n a: /api/rifas/my/${rifaId}`);
        
        const response = await fetch(`${API_BASE}/rifas/my/${rifaId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log(`üì° [DEBUG] Respuesta recibida. Status: ${response.status}`);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå [ERROR] Respuesta no OK: ${response.status} - ${errorText}`);
            
            let errorMessage = 'Error cargando simulaci√≥n';
            try {
                const errorData = JSON.parse(errorText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = `Error ${response.status}: ${errorText}`;
            }
            
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        console.log('‚úÖ [DEBUG] Datos recibidos:', data);
        
        if (!data.rifa) {
            throw new Error('Datos de simulaci√≥n no encontrados en respuesta');
        }
        
        const rifa = data.rifa;
        const isCompleted = rifa.status === 'completed';
        const winnerNumber = rifa.winner ? rifa.winner.number : null;
        
        console.log(`‚úÖ [DEBUG] Procesando rifa: "${rifa.title}" (Status: ${rifa.status})`);
        
        // Generar grid de n√∫meros
        let numbersGridHtml = '';
        for (let i = 0; i <= 99; i++) {
            const isSelected = rifa.sold_numbers && rifa.sold_numbers.includes(i);
            const isWinner = winnerNumber === i;
            let cellClass = 'number-cell';
            
            if (isWinner) {
                cellClass = 'number-cell winner';
            } else if (isSelected) {
                cellClass = 'number-cell sold';
            }
            
            numbersGridHtml += `<div class="${cellClass}">${i.toString().padStart(2, '0')}</div>`;
        }
        
        const progressPercent = Math.round((rifa.numbers_sold / 100) * 100);
        
        console.log(`‚úÖ [DEBUG] Generando HTML para la vista...`);
        
        document.getElementById('mainContainer').innerHTML = `
            <div class="page-header">
                <h1>üéØ ${rifa.title}</h1>
                <p class="subtitle">${rifa.description}</p>
                ${isCompleted ? `<p style="background: #4caf50; color: white; padding: 10px; border-radius: 8px; text-align: center; margin-top: 10px;">
                    üèÜ ¬°SIMULACI√ìN COMPLETADA! Ganador: N√∫mero ${winnerNumber} (${rifa.winner.participant_name})
                </p>` : ''}
            </div>
            
            <div style="margin-bottom: 20px;">
                <button class="btn btn-secondary" onclick="navigateTo('perfil')">
                    ‚Üê Volver a Mis Simulaciones
                </button>
                <button class="btn btn-primary" onclick="editRifa(${rifaId})" style="margin-left: 10px;">
                    ‚úèÔ∏è Editar
                </button>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 350px; gap: 30px;" class="rifa-details-grid">
                <div class="numbers-section">
                    <h3 style="margin-bottom: 15px;">üéØ N√∫meros de la Simulaci√≥n</h3>
                    <div class="numbers-grid">
                        ${numbersGridHtml}
                    </div>
                    
                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        <h4 style="color: #333; margin-bottom: 10px;">üìä Estad√≠sticas</h4>
                        <p style="margin: 5px 0;">‚Ä¢ N√∫meros ocupados: ${rifa.numbers_sold}/100</p>
                        <p style="margin: 5px 0;">‚Ä¢ Progreso: ${progressPercent}%</p>
                        <p style="margin: 5px 0;">‚Ä¢ C√≥digo de acceso: ${rifa.access_code || 'No disponible'}</p>
                    </div>
                </div>
                
                <div class="cart-section">
                    <div class="cart-header">
                        <span class="cart-icon">üéØ</span>
                        <h3 class="cart-title">${isCompleted ? 'Resultado Final' : 'Informaci√≥n'}</h3>
                    </div>
                    
                    ${isCompleted ? `
                    <div style="margin-bottom: 20px; padding: 15px; background: #fff3cd; border-radius: 8px; text-align: center; border: 2px solid #ffd700;">
                        <h4 style="color: #856404; margin: 0 0 10px 0; font-size: 1.1rem;">üèÜ ¬°GANADOR!</h4>
                        <div style="font-size: 2.5rem; font-weight: bold; color: #ffd700; margin: 10px 0;">${winnerNumber}</div>
                        <p style="color: #856404; margin: 0; font-weight: bold; font-size: 1.1rem;">${rifa.winner.participant_name}</p>
                    </div>` : ''}
                    
                    <div style="margin-bottom: 20px;">
                        <h4 style="color: #333; margin-bottom: 10px;">üìù Descripci√≥n</h4>
                        <p style="color: #666; line-height: 1.5;">${rifa.description}</p>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <h4 style="color: #333; margin-bottom: 10px;">üìà Progreso</h4>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progressPercent}%"></div>
                        </div>
                        <p class="progress-text">${rifa.numbers_sold}/100 n√∫meros</p>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <h4 style="color: #333; margin-bottom: 10px;">üîë C√≥digo de Acceso</h4>
                        <div class="access-code-display" style="display: flex; align-items: center; justify-content: space-between;">
                            <span id="displayCode">${rifa.access_code || 'GENERANDO...'}</span>
                            <button class="copy-code-btn" onclick="copyCode('${rifa.access_code}')" title="Copiar c√≥digo">
                                üìã
                            </button>
                        </div>
                        <p style="font-size: 0.8rem; color: #666; text-align: center;">Comparte este c√≥digo para que otros participen</p>
                    </div>
                    
                    ${!isCompleted ? `
                    <button class="btn btn-success" style="width: 100%; margin-bottom: 10px;" onclick="drawRifaWinner(${rifaId})">
                        üèÜ Realizar Sorteo
                    </button>` : `
                    <div style="text-align: center; padding: 15px; background: #e8f5e8; border-radius: 8px; margin-bottom: 10px;">
                        <p style="color: #2e7d32; font-weight: bold; margin: 0;">‚úì Sorteo Completado</p>
                    </div>`}
                    
                    <button class="btn btn-primary" style="width: 100%;" onclick="editRifa(${rifaId})">
                        ‚úèÔ∏è Editar Simulaci√≥n
                    </button>
                </div>
            </div>
        `;
        
        console.log('‚úÖ [DEBUG] Vista cargada exitosamente');
        
    } catch (error) {
        console.error('‚ùå [ERROR] Error en viewRifa:', error);
        
        // Mostrar error detallado
        document.getElementById('mainContainer').innerHTML = `
            <div class="page-header">
                <h1>‚ö†Ô∏è Error Cargando Simulaci√≥n</h1>
                <p class="subtitle">No se pudo cargar la simulaci√≥n ID: ${rifaId}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
                <button class="btn btn-secondary" onclick="navigateTo('perfil')">
                    ‚Üê Volver a Mis Simulaciones
                </button>
            </div>
            
            <div style="background: white; border-radius: 15px; padding: 30px; text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 20px;">‚ùå</div>
                <h3 style="color: #333; margin-bottom: 15px;">Error de Conexi√≥n</h3>
                <p style="color: #666; margin-bottom: 20px;">
                    ${error.message}
                </p>
                
                <div style="background: #ffebee; border: 1px solid #ffcdd2; border-radius: 8px; padding: 15px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #c62828; margin: 0 0 10px 0;">üîß Informaci√≥n de Debug:</h4>
                    <p style="color: #c62828; font-size: 0.9rem; margin: 0;">
                        ‚Ä¢ ID de simulaci√≥n: ${rifaId}<br>
                        ‚Ä¢ Token disponible: ${token ? 'S√≠' : 'No'}<br>
                        ‚Ä¢ API Base: ${API_BASE}<br>
                        ‚Ä¢ Error: ${error.message}
                    </p>
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button class="btn btn-primary" onclick="viewRifa(${rifaId})">
                        üîÑ Reintentar
                    </button>
                    <button class="btn btn-secondary" onclick="navigateTo('perfil')">
                        ‚Üê Volver
                    </button>
                </div>
            </div>
        `;
        
        // Tambi√©n mostrar notificaci√≥n
        showNotification(error.message, 'error');
    }
}

// ====================================================================
// üìã INSTRUCCIONES PARA APLICAR EL FIX:
// ====================================================================
console.log(`
üîß PARA APLICAR ESTA CORRECCI√ìN:

1. Abre el archivo: frontend/index.html
2. Busca la funci√≥n "async function viewRifa(rifaId)"
3. Reemplaza TODA la funci√≥n con la versi√≥n de arriba
4. Guarda el archivo
5. Recarga la p√°gina (F5)
6. Prueba el bot√≥n "Ver" nuevamente

El fix incluye:
‚úÖ Validaci√≥n mejorada de ID y token
‚úÖ Logging detallado para debug
‚úÖ Manejo de errores m√°s robusto
‚úÖ Informaci√≥n de debug en caso de error
‚úÖ Reintentos autom√°ticos
`);
