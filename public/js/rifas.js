// ========== RIFAS.JS - FUNCIONES ESPEC√çFICAS DE RIFAS ==========
// Funciones para gesti√≥n de rifas, participaci√≥n y visualizaci√≥n

// ========== FUNCIONES RIFAS P√öBLICAS - FASE 15C ==========

async function viewPublicRifa(rifaId) {
    document.getElementById('mainContainer').innerHTML = `
        <div class="loading">
            <p>üîÑ Cargando detalles de la simulaci√≥n...</p>
        </div>
    `;
    
    try {
        const response = await fetch(`${API_BASE}/rifas/${rifaId}`);
        const data = await response.json();
        
        if (response.ok && data.rifa) {
            const rifa = data.rifa;
            const isCompleted = rifa.status === 'completed';
            const winnerNumber = rifa.winner ? rifa.winner.number : null;
            const emoji = rifa.title.includes('iPhone') ? 'üì±' : 
                         rifa.title.includes('Cartera') ? 'üëú' : '‚úàÔ∏è';
            const progressPercent = rifa.max_numbers ? Math.round((rifa.numbers_sold / rifa.max_numbers) * 100) : 0;
            
            // Generar grid de n√∫meros
            let numbersGridHtml = '';
            for (let i = 0; i <= 99; i++) {
                const isSelected = rifa.sold_numbers && rifa.sold_numbers.includes(i);
                const isWinner = winnerNumber === i;
                let cellClass = 'number-cell';
                
                if (isWinner) {
                    cellClass = 'number-cell winner';
                } else if (isSelected) {
                    cellClass = 'number-cell sold';
                }
                
                numbersGridHtml += `<div class="${cellClass}">${i.toString().padStart(2, '0')}</div>`;
            }
            
            document.getElementById('mainContainer').innerHTML = `
                <div class="page-header">
                    <h1>${emoji} ${rifa.title}</h1>
                    <p class="subtitle">Simulaci√≥n p√∫blica de demostraci√≥n</p>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <button class="btn btn-secondary" onclick="navigateTo('rifas')">
                        ‚Üê Volver a Simulaciones P√∫blicas
                    </button>
                </div>
                
                <div class="legal-notice">
                    <strong>Vista de Solo Lectura:</strong> Esta es una simulaci√≥n p√∫blica de demostraci√≥n. Los n√∫meros mostrados en rojo ya est√°n ocupados por otros participantes.
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 350px; gap: 30px; margin-bottom: 30px;" class="rifa-details-grid">
                    <div class="numbers-section">
                        <h3 style="margin-bottom: 15px; color: #333;">üéØ N√∫meros de la Simulaci√≥n</h3>
                        <p style="color: #666; margin-bottom: 20px;">Los n√∫meros en rojo ya est√°n seleccionados</p>
                        
                        <div class="numbers-grid">
                            ${numbersGridHtml}
                        </div>
                        
                        <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                            <h4 style="color: #333; margin-bottom: 10px;">üìä Estad√≠sticas</h4>
                            <p style="margin: 5px 0; color: #666;">‚Ä¢ N√∫meros ocupados: ${rifa.numbers_sold}/100</p>
                            <p style="margin: 5px 0; color: #666;">‚Ä¢ Progreso: ${progressPercent}%</p>
                            <p style="margin: 5px 0; color: #666;">‚Ä¢ Estado: ${rifa.status === 'active' ? 'Activa' : 'Finalizada'}</p>
                        </div>
                    </div>
                    
                    <div class="cart-section">
                        <div class="cart-header">
                            <span class="cart-icon">${emoji}</span>
                            <h3 class="cart-title">Informaci√≥n</h3>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <h4 style="color: #333; margin-bottom: 10px;">üìù Descripci√≥n</h4>
                            <p style="color: #666; line-height: 1.5; font-size: 0.9rem;">${rifa.description}</p>
                        </div>
                        
                        <div class="rifa-progress" style="margin-bottom: 20px;">
                            <h4 style="color: #333; margin-bottom: 10px;">üìà Progreso</h4>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${progressPercent}%"></div>
                            </div>
                            <p class="progress-text">${rifa.numbers_sold}/100 n√∫meros seleccionados</p>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <h4 style="color: #333; margin-bottom: 10px;">‚ÑπÔ∏è Detalles</h4>
                            <p style="color: #666; font-size: 0.9rem; margin: 5px 0;">‚Ä¢ Creador: ${rifa.creator_username || 'Sistema'}</p>
                            <p style="color: #666; font-size: 0.9rem; margin: 5px 0;">‚Ä¢ Tipo: Simulaci√≥n p√∫blica</p>
                            <p style="color: #666; font-size: 0.9rem; margin: 5px 0;">‚Ä¢ Fines: Educativos/Demo</p>
                        </div>
                        
                        <div style="text-align: center; margin-top: 20px;">
                            <p style="font-size: 0.9rem; color: #666; margin-bottom: 15px;">
                                üí° ¬øTe gusta esta simulaci√≥n?
                            </p>
                            <button class="btn btn-success" style="width: 100%; margin-bottom: 10px;" onclick="showAuthModal()">
                                üöÄ Crear Mi Propia Simulaci√≥n
                            </button>
                            <button class="btn btn-secondary" style="width: 100%;" onclick="navigateTo('demo')">
                                üéÆ Probar Simulador
                            </button>
                        </div>
                    </div>
                </div>
                
                <div style="background: #e3f2fd; border: 1px solid #90caf9; border-radius: 8px; padding: 20px; text-align: center;">
                    <h4 style="color: #1565c0; margin: 0 0 10px 0;">üéì Simulaci√≥n Educativa</h4>
                    <p style="color: #1565c0; font-size: 0.9rem; margin: 0;">
                        Esta es una simulaci√≥n de demostraci√≥n sin valor monetario. Los participantes y n√∫meros son ficticios con fines educativos.
                    </p>
                </div>
            `;
        } else {
            document.getElementById('mainContainer').innerHTML = `
                <div class="page-header">
                    <h1>‚ùå Simulaci√≥n No Encontrada</h1>
                    <p class="subtitle">La simulaci√≥n solicitada no existe o no est√° disponible</p>
                </div>
                
                <div style="text-align: center; padding: 40px; background: white; border-radius: 15px;">
                    <div style="font-size: 3rem; margin-bottom: 15px;">üîç</div>
                    <h3 style="color: #333; margin-bottom: 15px;">Simulaci√≥n no encontrada</h3>
                    <p style="color: #666; margin-bottom: 25px;">La simulaci√≥n que buscas no existe o no est√° disponible p√∫blicamente.</p>
                    
                    <button class="btn btn-primary" onclick="navigateTo('rifas')">
                        ‚Üê Volver a Simulaciones P√∫blicas
                    </button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error cargando detalles de rifa:', error);
        document.getElementById('mainContainer').innerHTML = `
            <div class="page-header">
                <h1>‚ö†Ô∏è Error de Conexi√≥n</h1>
                <p class="subtitle">No se pudo cargar la simulaci√≥n</p>
            </div>
            
            <div style="text-align: center; padding: 40px; background: white; border-radius: 15px;">
                <div style="font-size: 3rem; margin-bottom: 15px;">üåê</div>
                <h3 style="color: #333; margin-bottom: 15px;">Error de conexi√≥n</h3>
                <p style="color: #666; margin-bottom: 25px;">No se pudo conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.</p>
                
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button class="btn btn-secondary" onclick="navigateTo('rifas')">
                        ‚Üê Volver
                    </button>
                    <button class="btn btn-primary" onclick="location.reload()">
                        üîÑ Reintentar
                    </button>
                </div>
            </div>
        `;
    }
}

// ========== GESTI√ìN DE RIFAS ==========

async function editRifa(rifaId) {
    try {
        const response = await fetch(`${API_BASE}/rifas/my/${rifaId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const rifa = data.rifa;
            
            document.getElementById('editRifaTitle').value = rifa.title;
            document.getElementById('editRifaDescription').value = rifa.description;
            document.getElementById('editRifaModal').style.display = 'flex';
            document.getElementById('editRifaForm').dataset.rifaId = rifaId;
        } else {
            showNotification('Error cargando datos de la simulaci√≥n', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error de conexi√≥n', 'error');
    }
}

async function deleteRifa(rifaId) {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar esta simulaci√≥n? Esta acci√≥n no se puede deshacer.')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE}/rifas/${rifaId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });
        
        if (response.ok) {
            showNotification('Simulaci√≥n eliminada exitosamente');
            showPerfilPage();
        } else {
            const data = await response.json();
            showNotification(data.error || 'Error eliminando simulaci√≥n', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error de conexi√≥n', 'error');
    }
}

async function drawRifaWinner(rifaId) {
    try {
        const response = await fetch(`${API_BASE}/rifas/${rifaId}/draw`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            showNotification(`¬°Ganador: N√∫mero ${data.winner.number}! Participante: ${data.winner.participant_name}`);
            viewRifa(rifaId);
        } else {
            const data = await response.json();
            showNotification(data.error || 'Error realizando sorteo', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error de conexi√≥n', 'error');
    }
}

// ========== FUNCI√ìN PARTICIPACI√ìN ==========

async function participateInRifa(rifaId, selectedNumbers) {
    if (selectedNumbers.length === 0) {
        showNotification('¬°Primero debes seleccionar al menos un n√∫mero!', 'error');
        return;
    }
    
    let participantName = 'Participante An√≥nimo';
    
    if (currentUser && currentUser.username) {
        participantName = currentUser.username;
        console.log(`üîÑ [FASE 15K] Usando nombre del usuario logueado: ${participantName}`);
    } else {
        participantName = prompt('¬øCu√°l es tu nombre?');
        if (!participantName || participantName.trim() === '') {
            showNotification('El nombre es requerido para participar', 'error');
            return;
        }
    }

    try {
        const response = await fetch(`${API_BASE}/rifas/${rifaId}/participate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': currentUser ? `Bearer ${localStorage.getItem('authToken')}` : ''
            },
            body: JSON.stringify({
                numbers: selectedNumbers,
                participant_name: participantName
            })
        });

        const data = await response.json();

        if (response.ok) {
            showNotification(`¬°Participaci√≥n exitosa! N√∫meros registrados para ${participantName}`);
            viewRifaByCode(data.rifa, data.rifa.access_code);
        } else {
            showNotification(data.error || 'Error al participar', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error de conexi√≥n', 'error');
    }
}

// ========== FUNCIONES DE UTILIDAD ==========

async function copyCode(code) {
    if (!code || code === 'GENERANDO...') {
        showNotification('No hay c√≥digo disponible para copiar', 'error');
        return;
    }
    
    try {
        if (navigator.clipboard && window.isSecureContext) {
            await navigator.clipboard.writeText(code);
            showNotification(`C√≥digo ${code} copiado al portapapeles`);
        } else {
            const textArea = document.createElement('textarea');
            textArea.value = code;
            textArea.style.position = 'fixed';
            textArea.style.opacity = '0';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                document.execCommand('copy');
                showNotification(`C√≥digo ${code} copiado al portapapeles`);
            } catch (err) {
                showNotification('Error al copiar c√≥digo', 'error');
            }
            
            document.body.removeChild(textArea);
        }
    } catch (err) {
        console.error('Error copiando c√≥digo:', err);
        showNotification('Error al copiar c√≥digo', 'error');
    }
}
