const { runQuery, getQuery, allQuery } = require('./database');

const createDemoContent = async () => {
    try {
        console.log('üéä FASE 15: Creando contenido de demostraci√≥n...');

        // Funci√≥n para generar c√≥digo de acceso
        const generateAccessCode = () => {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let result = '';
            for (let i = 0; i < 6; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        };

        // Verificar si ya existen rifas p√∫blicas
        const existingPublicRifas = await allQuery('SELECT COUNT(*) as count FROM rifas WHERE is_public = TRUE');
        if (existingPublicRifas[0].count > 0) {
            console.log('üéÆ Rifas p√∫blicas ya existen. Limpiando primero...');
            await runQuery('DELETE FROM rifa_numbers WHERE rifa_id IN (SELECT id FROM rifas WHERE is_public = TRUE)');
            await runQuery('DELETE FROM rifas WHERE is_public = TRUE');
        }

        // Crear o obtener usuario del sistema para rifas p√∫blicas
        let systemUserId;
        try {
            // Intentar obtener usuario admin existente
            const adminUser = await getQuery('SELECT id FROM users WHERE username = ?', ['admin']);
            if (adminUser) {
                systemUserId = adminUser.id;
                console.log('üë§ Usando usuario admin existente (ID: ' + systemUserId + ')');
            } else {
                // Crear usuario del sistema para rifas p√∫blicas
                const bcrypt = require('bcryptjs');
                const hashedPassword = await bcrypt.hash('admin123', 10);
                const newUser = await runQuery(`
                    INSERT INTO users (username, email, password, created_at) 
                    VALUES (?, ?, ?, datetime('now'))
                `, ['admin', 'admin@sistema.demo', hashedPassword]);
                systemUserId = newUser.id;
                console.log('üë§ Usuario del sistema creado (ID: ' + systemUserId + ')');
            }
        } catch (error) {
            console.error('‚ùå Error gestionando usuario del sistema:', error.message);
            return;
        }
        
        // RIFAS P√öBLICAS DE DEMOSTRACI√ìN - FASE 15
        const rifasDemo = [
            {
                title: 'iPhone 15 Pro',
                description: 'Sorteo corporativo educativo. El m√°s moderno smartphone de Apple con c√°mara profesional, pantalla Super Retina XDR y chip A17 Pro. Esta es una simulaci√≥n educativa sin valor monetario.',
                emoji: 'üì±',
                participantes: [
                    'Ana Mart√≠nez', 'Carlos Silva', 'Mar√≠a Rodriguez', 'Juan P√©rez', 
                    'Sofia L√≥pez', 'Diego Garc√≠a', 'Laura Fern√°ndez', 'Miguel Torres',
                    'Valentina Cruz', 'Sebasti√°n Ruiz', 'Camila Vargas', 'Andr√©s Morales'
                ]
            },
            {
                title: 'Cartera de Mujer Premium',
                description: 'Elegante cartera de cuero afgano aut√©ntico, hecha a mano por artesanos especializados. Incluye m√∫ltiples compartimentos y acabados de lujo. Simulaci√≥n educativa para fines de demostraci√≥n.',
                emoji: 'üëú',
                participantes: [
                    'Isabella Santos', 'Gabriela Herrera', 'Natalia Jim√©nez', 'Adriana Castro',
                    'Luc√≠a Mendoza', 'Daniela Ortiz', 'Alejandra Vega', 'Carolina Reyes',
                    'Antonella Flores', 'Valentina Rojas'
                ]
            },
            {
                title: 'Viaje a Europa',
                description: 'Promoci√≥n especial educativa: Viaje todo incluido para 2 personas por 15 d√≠as visitando Par√≠s, Roma, Madrid y Barcelona. Incluye vuelos, hoteles 4 estrellas y tours guiados. Esta es una simulaci√≥n para fines educativos.',
                emoji: '‚úàÔ∏è',
                participantes: [
                    'Roberto Delgado', 'Fernanda Aguilar', 'Ricardo Salinas', 'M√≥nica Paredes',
                    'Eduardo Ram√≠rez', 'Paola Cort√©s', 'Alberto Guerrero', 'Sandra Molina',
                    'Javier Espinoza', 'Roc√≠o Cabrera', 'Mauricio Luna', 'Beatriz Navarro',
                    'Gabriel Soto', 'Elena Ramos', 'Fernando Medina', 'Cristina Pe√±a'
                ]
            }
        ];

        // Crear las rifas de demostraci√≥n
        for (let i = 0; i < rifasDemo.length; i++) {
            const rifa = rifasDemo[i];
            
            // Generar c√≥digo de acceso √∫nico
            let accessCode;
            let codeExists = true;
            while (codeExists) {
                accessCode = generateAccessCode();
                const existing = await getQuery('SELECT id FROM rifas WHERE access_code = ?', [accessCode]);
                codeExists = !!existing;
            }

            // Crear la rifa p√∫blica
            const result = await runQuery(`
                INSERT INTO rifas (
                    user_id, title, description, access_code, 
                    is_public, status, max_numbers, created_at
                ) VALUES (?, ?, ?, ?, TRUE, 'active', 100, datetime('now'))
            `, [systemUserId, rifa.title, rifa.description, accessCode]);

            const rifaId = result.id;
            console.log(`üéÅ Rifa "${rifa.title}" creada (ID: ${rifaId}, C√≥digo: ${accessCode})`);

            // Agregar participantes realistas
            const participantes = rifa.participantes;
            const numerosAsignados = new Set();
            
            for (let j = 0; j < participantes.length; j++) {
                const participante = participantes[j];
                
                // Asignar entre 1-3 n√∫meros por participante
                const cantidadNumeros = Math.floor(Math.random() * 3) + 1;
                
                for (let k = 0; k < cantidadNumeros; k++) {
                    let numero;
                    let intentos = 0;
                    
                    // Buscar un n√∫mero disponible
                    do {
                        numero = Math.floor(Math.random() * 100);
                        intentos++;
                    } while (numerosAsignados.has(numero) && intentos < 50);
                    
                    if (!numerosAsignados.has(numero)) {
                        numerosAsignados.add(numero);
                        
                        await runQuery(`
                            INSERT INTO rifa_numbers (rifa_id, number, participant_name, selected_at) 
                            VALUES (?, ?, ?, datetime('now', '-' || ? || ' hours'))
                        `, [rifaId, numero, participante, Math.floor(Math.random() * 72) + 1]);
                    }
                }
            }
            
            console.log(`üë• ${numerosAsignados.size} n√∫meros asignados a ${participantes.length} participantes`);
        }

        // Mostrar resumen
        console.log('\n‚úÖ FASE 15 COMPLETADA - Demo Content creado exitosamente!');
        console.log('\nüéä RIFAS P√öBLICAS DISPONIBLES:');
        
        const rifasCreadas = await allQuery(`
            SELECT 
                r.title,
                r.access_code,
                COUNT(rn.id) as participantes
            FROM rifas r
            LEFT JOIN rifa_numbers rn ON r.id = rn.rifa_id
            WHERE r.is_public = TRUE
            GROUP BY r.id
            ORDER BY r.created_at
        `);

        rifasCreadas.forEach((rifa, index) => {
            const emoji = rifasDemo[index]?.emoji || 'üéÅ';
            console.log(`   ${emoji} ${rifa.title}`);
            console.log(`      C√≥digo: ${rifa.access_code}`);
            console.log(`      Participantes: ${rifa.participantes}`);
            console.log('');
        });

        console.log('üéØ CARACTER√çSTICAS DE LAS RIFAS DEMO:');
        console.log('   ‚úÖ P√∫blicas (visibles sin login)');
        console.log('   ‚úÖ Sin precios (cumple normativa argentina)');
        console.log('   ‚úÖ Participantes realistas');
        console.log('   ‚úÖ C√≥digos de acceso funcionales');
        console.log('   ‚úÖ Datos educativos/demostrativos');
        console.log('');
        console.log('üì± Los usuarios pueden:');
        console.log('   üëÄ Ver rifas en "Simulaciones P√∫blicas"');
        console.log('   üéØ Participar sin registrarse');
        console.log('   üîç Explorar la funcionalidad completa');

    } catch (error) {
        console.error('‚ùå Error creando contenido de demostraci√≥n:', error);
        throw error;
    }
};

// Ejecutar si se llama directamente
if (require.main === module) {
    createDemoContent().then(() => {
        console.log('\nüöÄ Demo content listo para FASE 15!');
        process.exit(0);
    }).catch(error => {
        console.error('üí• Error fatal:', error);
        process.exit(1);
    });
}

module.exports = createDemoContent;